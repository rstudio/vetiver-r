[{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to vetiver","title":"Contributing to vetiver","text":"outlines propose change vetiver. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to vetiver","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to vetiver","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://rstudio.github.io/vetiver-r/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to vetiver","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"rstudio/vetiver-r\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to vetiver","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://rstudio.github.io/vetiver-r/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to vetiver","text":"Please note modelops project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://rstudio.github.io/vetiver-r/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 vetiver authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rstudio.github.io/vetiver-r/articles/vetiver.html","id":"create-a-vetiver_model","dir":"Articles","previous_headings":"","what":"Create a vetiver_model()","title":"Version, share, and deploy a model with vetiver","text":"vetiver package extensible, generics can support many kinds models. example, let’s consider one kind model supported vetiver, tidymodels workflow encompasses feature engineering model estimation. svm_fit object fitted workflow, feature engineering model parameters estimated using training data bivariate_train. can create vetiver_model() trained model; vetiver_model() collects information needed store, version, deploy trained model. Think vetiver_model() deployable model object.","code":"library(parsnip) library(recipes) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'recipes' #> The following object is masked from 'package:stats': #>  #>     step library(workflows) data(bivariate, package = \"modeldata\") bivariate_train #> # A tibble: 1,009 × 3 #>        A     B Class #>    <dbl> <dbl> <fct> #>  1 3279. 155.  One   #>  2 1727.  84.6 Two   #>  3 1195. 101.  One   #>  4 1027.  68.7 Two   #>  5 1036.  73.4 One   #>  6 1434.  79.5 One   #>  7  633.  67.4 One   #>  8 1262.  67.0 Two   #>  9  985.  62.0 Two   #> 10  893.  56.8 Two   #> # ℹ 999 more rows  biv_rec <-   recipe(Class ~ ., data = bivariate_train) %>%   step_BoxCox(all_predictors())%>%   step_normalize(all_predictors())  svm_spec <-   svm_linear(mode = \"classification\") %>%   set_engine(\"LiblineaR\")  svm_fit <-    workflow(biv_rec, svm_spec) %>%   fit(sample_frac(bivariate_train, 0.7)) library(vetiver) v <- vetiver_model(svm_fit, \"biv_svm\") #> Registered S3 method overwritten by 'butcher': #>   method                 from     #>   as.character.dev_topic generics v #>  #> ── biv_svm ─ <bundled_workflow> model for deployment  #> A LiblineaR classification modeling workflow using 2 features"},{"path":"https://rstudio.github.io/vetiver-r/articles/vetiver.html","id":"store-and-version-your-model","dir":"Articles","previous_headings":"","what":"Store and version your model","title":"Version, share, and deploy a model with vetiver","text":"can store version model choosing pins “board” , including local folder, Posit Connect, Amazon S3, . pins boards versioning turned default, can turn explicitly temporary demo board. write vetiver_model() board, binary model object stored board together necessary metadata, like packages needed make prediction model’s input data prototype checking new data prediction time. Let’s train model new version dataset write board. versions stored, access . primary purpose pins make easy share data artifacts, depending board choose, pinned vetiver_model() can shareable collaborators.","code":"library(pins) model_board <- board_temp(versioned = TRUE) model_board %>% vetiver_pin_write(v) svm_fit <-    workflow(biv_rec, svm_spec) %>%   fit(sample_frac(bivariate_train, 0.7))  v <- vetiver_model(svm_fit, \"biv_svm\")  model_board %>% vetiver_pin_write(v) model_board %>% pin_versions(\"biv_svm\") #> # A tibble: 2 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20251028T174739Z-4b6a8 2025-10-28 17:47:39 4b6a8 #> 2 20251028T174739Z-687c2 2025-10-28 17:47:39 687c2"},{"path":"https://rstudio.github.io/vetiver-r/articles/vetiver.html","id":"deploy-your-model","dir":"Articles","previous_headings":"","what":"Deploy your model","title":"Version, share, and deploy a model with vetiver","text":"can deploy model creating Plumber router, adding POST endpoint making predictions. start server using object, pipe (%>%) pr_run(port = 8088) port choice. allows interact vetiver API locally debug . Plumber APIs can hosted variety ways. can use function vetiver_write_plumber() create ready--go plumber.R file especially suited Posit Connect. real-world situation, see something like b <- board_connect() b <- board_s3() instead temporary demo board. Notice deployment strongly linked specific version pinned model; pin another version model deploy model, deployed model affected.","code":"library(plumber) pr() %>%   vetiver_api(v) #> # Plumber router with 4 endpoints, 4 filters, and 1 sub-router. #> # Use `pr_run()` on this object to start the API. #> ├──[queryString] #> ├──[body] #> ├──[cookieParser] #> ├──[sharedSecret] #> ├──/logo #> │  │ # Plumber static router serving from directory: /home/runner/work/_temp/Library/vetiver #> ├──/metadata (GET) #> ├──/ping (GET) #> ├──/predict (POST) #> └──/prototype (GET) #> vetiver_write_plumber(model_board, \"biv_svm\") # Generated by the vetiver package; edit with care  library(pins) library(plumber) library(rapidoc) library(vetiver)  # Packages needed to generate model predictions if (FALSE) {     library(LiblineaR)     library(parsnip)     library(recipes)     library(workflows) } b <- board_folder(path = \"/tmp/RtmpJxwKsu/pins-2385386f6089\") v <- vetiver_pin_read(b, \"biv_svm\", version = \"20251028T174739Z-4b6a8\")  #* @plumber function(pr) {     pr %>% vetiver_api(v) }"},{"path":"https://rstudio.github.io/vetiver-r/articles/vetiver.html","id":"predict-from-your-model-endpoint","dir":"Articles","previous_headings":"","what":"Predict from your model endpoint","title":"Version, share, and deploy a model with vetiver","text":"model deployed via vetiver can treated special vetiver_endpoint() object. deployed model endpoint running via one R process (either remotely server locally, perhaps via background job RStudio IDE), can make predictions deployed model new data another, separate R process. able predict() vetiver model endpoint takes advantage model’s input data prototype metadata stored model.","code":"library(vetiver) endpoint <- vetiver_endpoint(\"http://127.0.0.1:8088/predict\") endpoint #>  #> ── A model API endpoint for prediction:  #> http://127.0.0.1:8088/predict data(bivariate, package = \"modeldata\") predict(endpoint, bivariate_test) #> # A tibble: 710 × 1 #>    .pred_class #>    <chr>       #>  1 One         #>  2 Two         #>  3 One         #>  4 Two         #>  5 Two         #>  6 One         #>  7 Two         #>  8 Two         #>  9 Two         #> 10 One         #> # … with 700 more rows"},{"path":"https://rstudio.github.io/vetiver-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julia Silge. Maintainer, author. . Copyright holder, funder.","code":""},{"path":"https://rstudio.github.io/vetiver-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Silge J (2025). vetiver: Version, Share, Deploy, Monitor Models. R package version 0.2.6, https://vetiver.posit.co.","code":"@Manual{,   title = {vetiver: Version, Share, Deploy, and Monitor Models},   author = {Julia Silge},   year = {2025},   note = {R package version 0.2.6},   url = {https://vetiver.posit.co}, }"},{"path":"https://rstudio.github.io/vetiver-r/index.html","id":"vetiver-","dir":"","previous_headings":"","what":"Version, Share, Deploy, and Monitor Models","title":"Version, Share, Deploy, and Monitor Models","text":"Vetiver, oil tranquility, used stabilizing ingredient perfumery preserve volatile fragrances. goal vetiver provide fluent tooling version, share, deploy, monitor trained model. Functions handle recording checking model’s input data prototype, predicting remote API endpoint. vetiver package extensible, generics can support many kinds models, available R Python. learn vetiver, see: documentation https://vetiver.posit.co/ Python package https://rstudio.github.io/vetiver-python/ can use vetiver : tidymodels workflow (including stacks probably) caret mlr3 XGBoost ranger lm() glm() GAMS fit mgcv keras luz API torch","code":""},{"path":"https://rstudio.github.io/vetiver-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Version, Share, Deploy, and Monitor Models","text":"can install released version vetiver CRAN : development version GitHub :","code":"install.packages(\"vetiver\") # install.packages(\"pak\") pak::pak(\"rstudio/vetiver-r\")"},{"path":"https://rstudio.github.io/vetiver-r/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Version, Share, Deploy, and Monitor Models","text":"vetiver_model() object collects information needed store, version, deploy trained model. can version share vetiver_model() choosing pins “board” , including local folder, Posit Connect, Amazon S3, . can deploy pinned vetiver_model() via Plumber API, can hosted variety ways. deployed model endpoint running via one R process (either remotely server locally, perhaps via background job RStudio IDE), can make predictions deployed model new data another, separate R process. First, create model endpoint: model API endpoint deployed vetiver return predictions appropriate new data.","code":"library(parsnip) library(workflows) data(Sacramento, package = \"modeldata\")  rf_spec <- rand_forest(mode = \"regression\") rf_form <- price ~ type + sqft + beds + baths  rf_fit <-      workflow(rf_form, rf_spec) %>%     fit(Sacramento)  library(vetiver) v <- vetiver_model(rf_fit, \"sacramento_rf\") #> Registered S3 method overwritten by 'butcher': #>   method                 from     #>   as.character.dev_topic generics v #>  #> ── sacramento_rf ─ <bundled_workflow> model for deployment  #> A ranger regression modeling workflow using 4 features library(pins) model_board <- board_temp() model_board %>% vetiver_pin_write(v) library(plumber) pr() %>%   vetiver_api(v) %>%   pr_run(port = 8088) library(vetiver) endpoint <- vetiver_endpoint(\"http://127.0.0.1:8088/predict\") endpoint #>  #> ── A model API endpoint for prediction:  #> http://127.0.0.1:8088/predict library(tidyverse) new_sac <- Sacramento %>%      slice_sample(n = 20) %>%      select(type, sqft, beds, baths)  predict(endpoint, new_sac) #> # A tibble: 20 x 1 #>      .pred #>      <dbl> #>  1 165042. #>  2 212461. #>  3 119008. #>  4 201752. #>  5 223096. #>  6 115696. #>  7 191262. #>  8 211706. #>  9 259336. #> 10 206826. #> 11 234952. #> 12 221993. #> 13 204983. #> 14 548052. #> 15 151186. #> 16 299365. #> 17 213439. #> 18 287993. #> 19 272017. #> 20 226629."},{"path":"https://rstudio.github.io/vetiver-r/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Version, Share, Deploy, and Monitor Models","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions modeling, machine learning, MLOps please post Posit Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/api_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the OpenAPI specification using model metadata — api_spec","title":"Update the OpenAPI specification using model metadata — api_spec","text":"Update OpenAPI specification using model metadata","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/api_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the OpenAPI specification using model metadata — api_spec","text":"","code":"api_spec(spec, vetiver_model, path, all_docs = TRUE)  glue_spec_summary(prototype, return_type)  # Default S3 method glue_spec_summary(prototype, return_type = NULL)  # S3 method for class 'data.frame' glue_spec_summary(prototype, return_type = \"predictions\")  # S3 method for class 'array' glue_spec_summary(prototype, return_type = \"predictions\")"},{"path":"https://rstudio.github.io/vetiver-r/reference/api_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the OpenAPI specification using model metadata — api_spec","text":"spec OpenAPI Specification formatted list object vetiver_model deployable vetiver_model() object path endpoint path all_docs interactive visual API documentation created POST endpoints router pr? defaults TRUE, assumes POST endpoints use vetiver_model() input data prototype. prototype input data prototype model return_type Character string describe endpoint returns, \"predictions\"","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/api_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the OpenAPI specification using model metadata — api_spec","text":"api_spec() returns updated OpenAPI Specification object. function uses glue_spec_summary() internally, returns glue character string.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/api_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the OpenAPI specification using model metadata — api_spec","text":"","code":"library(plumber) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") #> Registered S3 method overwritten by 'butcher': #>   method                 from     #>   as.character.dev_topic generics  glue_spec_summary(v$prototype) #> Return predictions from model using 10 features  modify_spec <- function(spec) api_spec(spec, v, \"/predict\") pr() %>% pr_set_api_spec(api = modify_spec) #> # Plumber router with 0 endpoints, 4 filters, and 0 sub-routers. #> # Use `pr_run()` on this object to start the API. #> ├──[queryString] #> ├──[body] #> ├──[cookieParser] #> ├──[sharedSecret]"},{"path":"https://rstudio.github.io/vetiver-r/reference/attach_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fully attach or load packages for making model predictions — attach_pkgs","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"developer-facing functions, useful supporting new model types. models require one R packages fully attached make predictions, require namespace one R packages loaded.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/attach_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"","code":"attach_pkgs(pkgs)  load_pkgs(pkgs)"},{"path":"https://rstudio.github.io/vetiver-r/reference/attach_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"pkgs character vector package names load fully attach.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/attach_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"invisible TRUE.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/attach_pkgs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"two functions attempt either : fully attach load namespace pkgs vector package names, preserving current random seed. learn load vs. attach, read \"Dependencies\" chapter R Packages. deploying model, likely safer fully attach needed packages comes risk naming conflicts packages.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/attach_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"","code":"## succeed load_pkgs(c(\"knitr\", \"readr\")) attach_pkgs(c(\"knitr\", \"readr\"))  ## fail try(load_pkgs(c(\"bloopy\", \"readr\"))) #> Error in load_pkgs(c(\"bloopy\", \"readr\")) :  #>   Namespace(s) could not be loaded: #> • bloopy try(attach_pkgs(c(\"bloopy\", \"readr\"))) #> Error in attach_pkgs(c(\"bloopy\", \"readr\")) :  #>   Package(s) could not be attached: #> • bloopy"},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Post new data to a deployed model API endpoint and augment with predictions — augment.vetiver_endpoint","title":"Post new data to a deployed model API endpoint and augment with predictions — augment.vetiver_endpoint","text":"Post new data deployed model API endpoint augment predictions","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post new data to a deployed model API endpoint and augment with predictions — augment.vetiver_endpoint","text":"","code":"# S3 method for class 'vetiver_endpoint' augment(x, new_data, ...)"},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post new data to a deployed model API endpoint and augment with predictions — augment.vetiver_endpoint","text":"x model API endpoint object created vetiver_endpoint(). new_data New data making predictions, data frame. ... Extra arguments passed httr::POST()","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post new data to a deployed model API endpoint and augment with predictions — augment.vetiver_endpoint","text":"new_data added prediction column(s).","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post new data to a deployed model API endpoint and augment with predictions — augment.vetiver_endpoint","text":"","code":"if (FALSE) { endpoint <- vetiver_endpoint(\"http://127.0.0.1:8088/predict\") augment(endpoint, mtcars[4:7, -1]) }"},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint_sagemaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Post new data to a deployed SageMaker model endpoint and augment with predictions — augment.vetiver_endpoint_sagemaker","title":"Post new data to a deployed SageMaker model endpoint and augment with predictions — augment.vetiver_endpoint_sagemaker","text":"Post new data deployed SageMaker model endpoint augment predictions","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint_sagemaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post new data to a deployed SageMaker model endpoint and augment with predictions — augment.vetiver_endpoint_sagemaker","text":"","code":"# S3 method for class 'vetiver_endpoint_sagemaker' augment(x, new_data, ...)"},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint_sagemaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post new data to a deployed SageMaker model endpoint and augment with predictions — augment.vetiver_endpoint_sagemaker","text":"x SageMaker model endpoint object created vetiver_endpoint_sagemaker(). new_data New data making predictions, data frame. ... Extra arguments passed paws.machine.learning::sagemakerruntime_invoke_endpoint()","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint_sagemaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post new data to a deployed SageMaker model endpoint and augment with predictions — augment.vetiver_endpoint_sagemaker","text":"new_data added prediction column(s).","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/augment.vetiver_endpoint_sagemaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post new data to a deployed SageMaker model endpoint and augment with predictions — augment.vetiver_endpoint_sagemaker","text":"","code":"if (FALSE) {   endpoint <- vetiver_endpoint_sagemaker(\"sagemaker-demo-model\")   augment(endpoint, mtcars[4:7, -1]) }"},{"path":"https://rstudio.github.io/vetiver-r/reference/handler_startup.html","id":null,"dir":"Reference","previous_headings":"","what":"Model handler functions for API endpoint — handler_startup.train","title":"Model handler functions for API endpoint — handler_startup.train","text":"developer-facing functions, useful supporting new model types. model supported vetiver_model() uses two handler functions vetiver_api(): handler_startup function executes API starts. Use function tasks like loading packages. model can use default method , NULL (nothing startup). handler_predict function executes API call. Use function calling predict() tasks must executed API call.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/handler_startup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model handler functions for API endpoint — handler_startup.train","text":"","code":"# S3 method for class 'train' handler_startup(vetiver_model)  # S3 method for class 'train' handler_predict(vetiver_model, ...)  # S3 method for class 'gam' handler_startup(vetiver_model)  # S3 method for class 'gam' handler_predict(vetiver_model, ...)  # S3 method for class 'glm' handler_predict(vetiver_model, ...)  handler_startup(vetiver_model)  # Default S3 method handler_startup(vetiver_model)  handler_predict(vetiver_model, ...)  # Default S3 method handler_predict(vetiver_model, ...)  # S3 method for class 'keras.engine.training.Model' handler_startup(vetiver_model)  # S3 method for class 'keras.engine.training.Model' handler_predict(vetiver_model, ...)  # S3 method for class 'kproto' handler_predict(vetiver_model, ...)  # S3 method for class 'lm' handler_predict(vetiver_model, ...)  # S3 method for class 'luz_module_fitted' handler_startup(vetiver_model)  # S3 method for class 'luz_module_fitted' handler_predict(vetiver_model, ...)  # S3 method for class 'Learner' handler_startup(vetiver_model)  # S3 method for class 'Learner' handler_predict(vetiver_model, ...)  # S3 method for class 'int_conformal_split' handler_startup(vetiver_model)  # S3 method for class 'int_conformal_split' handler_predict(vetiver_model, ...)  # S3 method for class 'int_conformal_full' handler_startup(vetiver_model)  # S3 method for class 'int_conformal_full' handler_predict(vetiver_model, ...)  # S3 method for class 'int_conformal_quantile' handler_startup(vetiver_model)  # S3 method for class 'int_conformal_quantile' handler_predict(vetiver_model, ...)  # S3 method for class 'int_conformal_cv' handler_startup(vetiver_model)  # S3 method for class 'int_conformal_cv' handler_predict(vetiver_model, ...)  # S3 method for class 'ranger' handler_startup(vetiver_model)  # S3 method for class 'ranger' handler_predict(vetiver_model, ...)  # S3 method for class 'recipe' handler_startup(vetiver_model)  # S3 method for class 'recipe' handler_predict(vetiver_model, ...)  # S3 method for class 'model_stack' handler_startup(vetiver_model)  # S3 method for class 'model_stack' handler_predict(vetiver_model, ...)  # S3 method for class 'workflow' handler_startup(vetiver_model)  # S3 method for class 'workflow' handler_predict(vetiver_model, ...)  # S3 method for class 'xgb.Booster' handler_startup(vetiver_model)  # S3 method for class 'xgb.Booster' handler_predict(vetiver_model, ...)"},{"path":"https://rstudio.github.io/vetiver-r/reference/handler_startup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model handler functions for API endpoint — handler_startup.train","text":"vetiver_model deployable vetiver_model() object ... arguments passed predict(), prediction type","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/handler_startup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model handler functions for API endpoint — handler_startup.train","text":"handler_startup function return invisibly, handler_predict function return function signature function(req). request body (req$body) consists new data prediction time; function return predictions either tibble list coercable tibble via tibble::as_tibble().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/handler_startup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model handler functions for API endpoint — handler_startup.train","text":"two generics use class vetiver_model$model dispatch.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/handler_startup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model handler functions for API endpoint — handler_startup.train","text":"","code":"cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") handler_startup(v) handler_predict(v) #> function (req)  #> { #>     newdata <- req$body #>     if (!is_null(ptype)) { #>         newdata <- vetiver_type_convert(newdata, ptype) #>         newdata <- hardhat::scream(newdata, ptype) #>     } #>     ret <- predict(vetiver_model$model, newdata = newdata, ...) #>     list(.pred = ret) #> } #> <bytecode: 0x55f2b48fdff0> #> <environment: 0x55f2b48e4b38>"},{"path":"https://rstudio.github.io/vetiver-r/reference/map_request_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify data types for each column in an input data prototype — map_request_body","title":"Identify data types for each column in an input data prototype — map_request_body","text":"OpenAPI specification Plumber API created via plumber::pr() can modified via plumber::pr_set_api_spec(), helper function identify data types predictors create list use specification. R data types, instead basic JSON data types. example, factors R documented strings OpenAPI specification.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/map_request_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify data types for each column in an input data prototype — map_request_body","text":"","code":"map_request_body(prototype)"},{"path":"https://rstudio.github.io/vetiver-r/reference/map_request_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify data types for each column in an input data prototype — map_request_body","text":"prototype input data prototype model","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/map_request_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify data types for each column in an input data prototype — map_request_body","text":"list used within plumber::pr_set_api_spec()","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/map_request_body.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify data types for each column in an input data prototype — map_request_body","text":"developer-facing function, useful supporting new model types. called api_spec().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/map_request_body.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify data types for each column in an input data prototype — map_request_body","text":"","code":"map_request_body(vctrs::vec_slice(chickwts, 0)) #> $content #> $content$`application/json` #> $content$`application/json`$schema #> $content$`application/json`$schema$type #> [1] \"array\" #>  #> $content$`application/json`$schema$minItems #> [1] 1 #>  #> $content$`application/json`$schema$items #> $content$`application/json`$schema$items$type #> [1] \"object\" #>  #> $content$`application/json`$schema$items$properties #> $content$`application/json`$schema$items$properties$weight #> $content$`application/json`$schema$items$properties$weight$type #> [1] \"number\" #>  #>  #> $content$`application/json`$schema$items$properties$feed #> $content$`application/json`$schema$items$properties$feed$type #> [1] \"string\" #>  #>  #>  #>  #>  #>  #>"},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"Post new data deployed model API endpoint return predictions","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"","code":"# S3 method for class 'vetiver_endpoint' predict(object, new_data, ...)"},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"object model API endpoint object created vetiver_endpoint(). new_data New data making predictions, data frame. ... Extra arguments passed httr::POST()","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"tibble model predictions many rows new_data.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"","code":"if (FALSE) { endpoint <- vetiver_endpoint(\"http://127.0.0.1:8088/predict\") predict(endpoint, mtcars[4:7, -1]) }"},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint_sagemaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Post new data to a deployed SageMaker model endpoint and return predictions — predict.vetiver_endpoint_sagemaker","title":"Post new data to a deployed SageMaker model endpoint and return predictions — predict.vetiver_endpoint_sagemaker","text":"Post new data deployed SageMaker model endpoint return predictions","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint_sagemaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post new data to a deployed SageMaker model endpoint and return predictions — predict.vetiver_endpoint_sagemaker","text":"","code":"# S3 method for class 'vetiver_endpoint_sagemaker' predict(object, new_data, ...)"},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint_sagemaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post new data to a deployed SageMaker model endpoint and return predictions — predict.vetiver_endpoint_sagemaker","text":"object SageMaker model endpoint object created vetiver_endpoint_sagemaker(). new_data New data making predictions, data frame. ... Extra arguments passed paws.machine.learning::sagemakerruntime_invoke_endpoint()","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint_sagemaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post new data to a deployed SageMaker model endpoint and return predictions — predict.vetiver_endpoint_sagemaker","text":"tibble model predictions many rows new_data.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/predict.vetiver_endpoint_sagemaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post new data to a deployed SageMaker model endpoint and return predictions — predict.vetiver_endpoint_sagemaker","text":"","code":"if (FALSE) {   endpoint <- vetiver_endpoint_sagemaker(\"sagemaker-demo-model\")   predict(endpoint, mtcars[4:7, -1]) }"},{"path":"https://rstudio.github.io/vetiver-r/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment, required_pkgs","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vetiver: Version, Share, Deploy, and Monitor Models — vetiver-package","title":"vetiver: Version, Share, Deploy, and Monitor Models — vetiver-package","text":"goal 'vetiver' provide fluent tooling version, share, deploy, monitor trained model. Functions handle recording checking model's input data prototype, predicting remote API endpoint. 'vetiver' package extensible, generics can support many kinds models.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vetiver: Version, Share, Deploy, and Monitor Models — vetiver-package","text":"Maintainer: Julia Silge julia.silge@posit.co (ORCID) contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"Use vetiver_api() add POST endpoint predictions trained vetiver_model() Plumber router.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"","code":"vetiver_api(   pr,   vetiver_model,   path = \"/predict\",   debug = is_interactive(),   ... )  vetiver_pr_post(   pr,   vetiver_model,   path = \"/predict\",   debug = is_interactive(),   ...,   check_prototype = TRUE,   check_ptype = deprecated() )  vetiver_pr_docs(pr, vetiver_model, path = \"/predict\", all_docs = TRUE)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"pr Plumber router, plumber::pr(). vetiver_model deployable vetiver_model() object path endpoint path debug TRUE provides insight API errors. ... arguments passed predict(), prediction type check_prototype input data prototype stored vetiver_model (used visual API documentation) also used check new data prediction time? Defaults TRUE. check_ptype  all_docs interactive visual API documentation created POST endpoints router pr? defaults TRUE, assumes POST endpoints use vetiver_model() input data prototype.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"Plumber router prediction endpoint added.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_api.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"can first store version vetiver_model() vetiver_pin_write(), create API endpoint vetiver_api(). Setting debug = TRUE may expose sensitive data model API errors. Several GET endpoints also added router pr, depending characteristics model object: /pin-url endpoint return URL pinned model /metadata endpoint return metadata stored model /ping endpoint API health /prototype endpoint model's input data prototype (use cereal::cereal_from_json()) convert back vctrs ptype function vetiver_api() uses: vetiver_pr_post() endpoint definition vetiver_pr_docs() create visual API documentation modular functions available advanced use cases.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"","code":"cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\")  library(plumber) pr() %>% vetiver_api(v) #> # Plumber router with 4 endpoints, 4 filters, and 1 sub-router. #> # Use `pr_run()` on this object to start the API. #> ├──[queryString] #> ├──[body] #> ├──[cookieParser] #> ├──[sharedSecret] #> ├──/logo #> │  │ # Plumber static router serving from directory: /home/runner/work/_temp/Library/vetiver #> ├──/metadata (GET) #> ├──/ping (GET) #> ├──/predict (POST) #> └──/prototype (GET) #>  ## is the same as: pr() %>% vetiver_pr_post(v) %>% vetiver_pr_docs(v) #> # Plumber router with 4 endpoints, 4 filters, and 1 sub-router. #> # Use `pr_run()` on this object to start the API. #> ├──[queryString] #> ├──[body] #> ├──[cookieParser] #> ├──[sharedSecret] #> ├──/logo #> │  │ # Plumber static router serving from directory: /home/runner/work/_temp/Library/vetiver #> ├──/metadata (GET) #> ├──/ping (GET) #> ├──/predict (POST) #> └──/prototype (GET) #>  ## for either, next, pipe to `pr_run()`"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_compute_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate model metrics over time for monitoring — vetiver_compute_metrics","title":"Aggregate model metrics over time for monitoring — vetiver_compute_metrics","text":"three functions can used model monitoring (monitoring dashboard): vetiver_compute_metrics() computes metrics (accuracy classification model RMSE regression model) chosen time aggregation period vetiver_pin_metrics() updates existing pin storing model metrics time vetiver_plot_metrics() creates plot metrics time","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_compute_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate model metrics over time for monitoring — vetiver_compute_metrics","text":"","code":"vetiver_compute_metrics(   data,   date_var,   period,   truth,   estimate,   ...,   metric_set = yardstick::metrics,   every = 1L,   origin = NULL,   before = 0L,   after = 0L,   complete = FALSE )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_compute_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate model metrics over time for monitoring — vetiver_compute_metrics","text":"data data.frame containing columns specified truth, estimate, .... date_var column data containing dates date-times monitoring, aggregated .period period [character(1)] string defining period group . Valid inputs can roughly broken : \"year\", \"quarter\", \"month\", \"week\", \"day\" \"hour\", \"minute\", \"second\", \"millisecond\" \"yweek\", \"mweek\" \"yday\", \"mday\" truth column identifier true results (numeric factor). unquoted column name although argument passed expression support quasiquotation (can unquote column names). estimate column identifier predicted results (also numeric factor). truth can specified different ways primary method use unquoted variable name. ... set unquoted column names one dplyr selector functions choose variables contain class probabilities. truth binary, 1 column selected, correspond value event_level. Otherwise, many columns factor levels truth ordering columns factor levels truth. metric_set yardstick::metric_set() function computing metrics. Defaults yardstick::metrics(). every [positive integer(1)] number periods group together. example, period set \"year\" every value 2, years 1970 1971 placed group. origin [Date(1) / POSIXct(1) / POSIXlt(1) / NULL] reference date time value. default left NULL epoch time 1970-01-01 00:00:00, time zone index. generally used define anchor time count , relevant every value > 1. , [integer(1) / Inf] number values current element include sliding window. Set Inf select elements current element. Negative values allowed, allows \"look forward\" current element used .value, \"look backwards\" used .. complete [logical(1)] function evaluated complete windows ? FALSE, default, partial computations allowed.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_compute_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate model metrics over time for monitoring — vetiver_compute_metrics","text":"dataframe metrics.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_compute_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate model metrics over time for monitoring — vetiver_compute_metrics","text":"arguments used monitoring dashboard, date_var, consider using R Markdown parameters reduce repetition /errors.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_compute_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate model metrics over time for monitoring — vetiver_compute_metrics","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(parsnip) data(Chicago, package = \"modeldata\") Chicago <- Chicago %>% select(ridership, date, all_of(stations)) training_data <- Chicago %>% filter(date < \"2009-01-01\") testing_data <- Chicago %>% filter(date >= \"2009-01-01\", date < \"2011-01-01\") monitoring <- Chicago %>% filter(date >= \"2011-01-01\", date < \"2012-12-31\") lm_fit <- linear_reg() %>% fit(ridership ~ ., data = training_data)  library(pins) b <- board_temp()  original_metrics <-     augment(lm_fit, new_data = testing_data) %>%     vetiver_compute_metrics(date, \"week\", ridership, .pred, every = 4L)  new_metrics <-     augment(lm_fit, new_data = monitoring) %>%     vetiver_compute_metrics(date, \"week\", ridership, .pred, every = 4L)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Model constructor methods — vetiver_create_description.train","title":"Model constructor methods — vetiver_create_description.train","text":"developer-facing functions, useful supporting new model types. model supported vetiver_model() uses four methods deployable object created: vetiver_create_description() function generates helpful description model based characteristics. method required. vetiver_create_meta() function creates correct vetiver_meta() model. especially helpful specifying packages needed prediction. model can use default method , special metadata. vetiver_ptype() function finds input data prototype training data (zero-row slice) use checking prediction time. method required. vetiver_prepare_model() function executes last. Use function tasks like checking model trained reducing size model via butcher::butcher(). model can use default method , return model without changes.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model constructor methods — vetiver_create_description.train","text":"","code":"# S3 method for class 'train' vetiver_create_description(model)  # S3 method for class 'train' vetiver_prepare_model(model)  # S3 method for class 'gam' vetiver_create_description(model)  # S3 method for class 'gam' vetiver_prepare_model(model)  # S3 method for class 'glm' vetiver_create_description(model)  # S3 method for class 'glm' vetiver_prepare_model(model)  # S3 method for class 'keras.engine.training.Model' vetiver_create_description(model)  # S3 method for class 'keras.engine.training.Model' vetiver_prepare_model(model)  # S3 method for class 'kproto' vetiver_create_description(model)  # S3 method for class 'kproto' vetiver_prepare_model(model)  # S3 method for class 'lm' vetiver_create_description(model)  # S3 method for class 'lm' vetiver_prepare_model(model)  # S3 method for class 'luz_module_fitted' vetiver_create_description(model)  # S3 method for class 'luz_module_fitted' vetiver_prepare_model(model)  # S3 method for class 'Learner' vetiver_create_description(model)  # S3 method for class 'Learner' vetiver_prepare_model(model)  vetiver_create_description(model)  # Default S3 method vetiver_create_description(model)  vetiver_prepare_model(model)  # Default S3 method vetiver_prepare_model(model)  # S3 method for class 'int_conformal_split' vetiver_create_description(model)  # S3 method for class 'int_conformal_split' vetiver_prepare_model(model)  # S3 method for class 'int_conformal_full' vetiver_create_description(model)  # S3 method for class 'int_conformal_full' vetiver_prepare_model(model)  # S3 method for class 'int_conformal_quantile' vetiver_create_description(model)  # S3 method for class 'int_conformal_quantile' vetiver_prepare_model(model)  # S3 method for class 'int_conformal_cv' vetiver_create_description(model)  # S3 method for class 'int_conformal_cv' vetiver_prepare_model(model)  # S3 method for class 'ranger' vetiver_create_description(model)  # S3 method for class 'ranger' vetiver_prepare_model(model)  # S3 method for class 'recipe' vetiver_create_description(model)  # S3 method for class 'recipe' vetiver_prepare_model(model)  # S3 method for class 'model_stack' vetiver_create_description(model)  # S3 method for class 'model_stack' vetiver_prepare_model(model)  # S3 method for class 'workflow' vetiver_create_description(model)  # S3 method for class 'workflow' vetiver_prepare_model(model)  # S3 method for class 'xgb.Booster' vetiver_create_description(model)  # S3 method for class 'xgb.Booster' vetiver_prepare_model(model)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model constructor methods — vetiver_create_description.train","text":"model trained model, lm() model tidymodels workflows::workflow().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_description.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model constructor methods — vetiver_create_description.train","text":"four generics use class model dispatch.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model constructor methods — vetiver_create_description.train","text":"","code":"cars_lm <- lm(mpg ~ ., data = mtcars) vetiver_create_description(cars_lm) #> [1] \"An OLS linear regression model\" vetiver_prepare_model(cars_lm) #>  #> Call: #> dummy_call() #>  #> Coefficients: #> (Intercept)          cyl         disp           hp         drat   #>    12.30337     -0.11144      0.01334     -0.02148      0.78711   #>          wt         qsec           vs           am         gear   #>    -3.71530      0.82104      0.31776      2.52023      0.65541   #>        carb   #>    -0.19942   #>"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"developer-facing functions, useful supporting new model types. metadata stored vetiver_model() object four elements: $user, metadata supplied user $version, version pin (can NULL pinning) $url, URL pin located, $required_pkgs, character string R packages required prediction","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"","code":"# S3 method for class 'train' vetiver_create_meta(model, metadata)  # S3 method for class 'gam' vetiver_create_meta(model, metadata)  # S3 method for class 'keras.engine.training.Model' vetiver_create_meta(model, metadata)  # S3 method for class 'kproto' vetiver_create_meta(model, metadata)  # S3 method for class 'luz_module_fitted' vetiver_create_meta(model, metadata)  vetiver_meta(user = list(), version = NULL, url = NULL, required_pkgs = NULL)  vetiver_create_meta(model, metadata)  # Default S3 method vetiver_create_meta(model, metadata)  # S3 method for class 'Learner' vetiver_create_meta(model, metadata)  # S3 method for class 'int_conformal_split' vetiver_create_meta(model, metadata)  # S3 method for class 'int_conformal_full' vetiver_create_meta(model, metadata)  # S3 method for class 'int_conformal_quantile' vetiver_create_meta(model, metadata)  # S3 method for class 'int_conformal_cv' vetiver_create_meta(model, metadata)  # S3 method for class 'ranger' vetiver_create_meta(model, metadata)  # S3 method for class 'recipe' vetiver_create_meta(model, metadata)  # S3 method for class 'model_stack' vetiver_create_meta(model, metadata)  # S3 method for class 'workflow' vetiver_create_meta(model, metadata)  # S3 method for class 'xgb.Booster' vetiver_create_meta(model, metadata)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"model trained model, lm() model tidymodels workflows::workflow(). metadata list containing additional metadata store pin. retrieving pin, stored user key, avoid potential clashes metadata pins uses. user Metadata supplied user version Version pin url URL pin, required_pkgs Character string R packages required prediction","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"vetiver_meta() constructor returns list. vetiver_create_meta function returns vetiver_meta() list.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"","code":"vetiver_meta() #> $user #> list() #>  #> $version #> NULL #>  #> $url #> NULL #>  #> $required_pkgs #> NULL #>   cars_lm <- lm(mpg ~ ., data = mtcars) vetiver_create_meta(cars_lm, list()) #> $user #> list() #>  #> $version #> NULL #>  #> $url #> NULL #>  #> $required_pkgs #> NULL #>"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_ptype.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vetiver input data prototype — vetiver_ptype.train","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"Optionally find return input data prototype model.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_ptype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"","code":"# S3 method for class 'train' vetiver_ptype(model, ...)  # S3 method for class 'gam' vetiver_ptype(model, ...)  # S3 method for class 'glm' vetiver_ptype(model, ...)  # S3 method for class 'keras.engine.training.Model' vetiver_ptype(model, ...)  # S3 method for class 'kproto' vetiver_ptype(model, ...)  # S3 method for class 'lm' vetiver_ptype(model, ...)  # S3 method for class 'luz_module_fitted' vetiver_ptype(model, ...)  # S3 method for class 'Learner' vetiver_ptype(model, ...)  # S3 method for class 'int_conformal_split' vetiver_ptype(model, ...)  # S3 method for class 'int_conformal_full' vetiver_ptype(model, ...)  # S3 method for class 'int_conformal_quantile' vetiver_ptype(model, ...)  # S3 method for class 'int_conformal_cv' vetiver_ptype(model, ...)  vetiver_ptype(model, ...)  # Default S3 method vetiver_ptype(model, ...)  vetiver_create_ptype(model, save_prototype, ...)  # S3 method for class 'ranger' vetiver_ptype(model, ...)  # S3 method for class 'recipe' vetiver_ptype(model, ...)  # S3 method for class 'model_stack' vetiver_ptype(model, ...)  # S3 method for class 'workflow' vetiver_ptype(model, ...)  # S3 method for class 'xgb.Booster' vetiver_ptype(model, ...)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_ptype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"model trained model, lm() model tidymodels workflows::workflow(). ... method-specific arguments passed vetiver_ptype() compute input data prototype, prototype_data (sample training features). save_prototype input data prototype stored model? options TRUE (default, stores zero-row slice training data), FALSE (input data prototype visual documentation checking), dataframe used checking prediction time examples API visual documentation.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_ptype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"vetiver_ptype method returns zero-row dataframe, vetiver_create_ptype() returns either zero-row dataframe, NULL, dataframe passed save_prototype.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_ptype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"developer-facing functions, useful supporting new model types. vetiver_model() object optionally stores input data prototype checking prediction time. default save_prototype, TRUE, finds input data prototype (zero-row slice training data) via vetiver_ptype(). save_prototype = FALSE opts storing input data prototype. may pass data save_prototype, sure check structure training data, perhaps hardhat::scream().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_ptype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"","code":"cars_lm <- lm(mpg ~ cyl + disp, data = mtcars)  vetiver_create_ptype(cars_lm, TRUE) #> # A tibble: 0 × 2 #> # ℹ 2 variables: cyl <dbl>, disp <dbl>  ## calls the right method for `model` via: vetiver_ptype(cars_lm) #> # A tibble: 0 × 2 #> # ℹ 2 variables: cyl <dbl>, disp <dbl>  ## can also turn off prototype vetiver_create_ptype(cars_lm, FALSE) #> NULL ## some models require that you pass in training features cars_rf <- ranger::ranger(mpg ~ ., data = mtcars) vetiver_ptype(cars_rf, prototype_data = mtcars[,-1]) #> # A tibble: 0 × 10 #> # ℹ 10 variables: cyl <dbl>, disp <dbl>, hp <dbl>, drat <dbl>, #> #   wt <dbl>, qsec <dbl>, vs <dbl>, am <dbl>, gear <dbl>, carb <dbl>"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_rsconnect_bundle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Posit Connect bundle for a vetiver model API — vetiver_create_rsconnect_bundle","title":"Create an Posit Connect bundle for a vetiver model API — vetiver_create_rsconnect_bundle","text":"Use vetiver_create_rsconnect_bundle() create Posit Connect model API bundle vetiver_model() versioned stored via vetiver_pin_write().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_rsconnect_bundle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Posit Connect bundle for a vetiver model API — vetiver_create_rsconnect_bundle","text":"","code":"vetiver_create_rsconnect_bundle(   board,   name,   version = NULL,   predict_args = list(),   filename = fs::file_temp(pattern = \"bundle\", ext = \".tar.gz\"),   additional_pkgs = character(0) )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_rsconnect_bundle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Posit Connect bundle for a vetiver model API — vetiver_create_rsconnect_bundle","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. predict_args list optional arguments passed vetiver_api() prediction type. filename path model API bundle created (can used argument connectapi::bundle_path()) additional_pkgs additional R packages need attached via library() run API, character vector.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_rsconnect_bundle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Posit Connect bundle for a vetiver model API — vetiver_create_rsconnect_bundle","text":"location model API bundle filename, invisibly.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_rsconnect_bundle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Posit Connect bundle for a vetiver model API — vetiver_create_rsconnect_bundle","text":"function creates deployable bundle. See Posit Connect docs deploy bundle, well connectapi R package integrate Connect's API R. two functions vetiver_create_rsconnect_bundle() vetiver_deploy_rsconnect() alternatives , providing different strategies deploying vetiver model API Posit Connect.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_create_rsconnect_bundle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Posit Connect bundle for a vetiver model API — vetiver_create_rsconnect_bundle","text":"","code":"if (FALSE) { # rlang::is_installed(\"connectapi\") && identical(Sys.getenv(\"NOT_CRAN\"), \"true\") library(pins) b <- board_temp(versioned = TRUE) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v)  ## when you pin to Posit Connect, your pin name will be typically be like: ## \"user.name/cars_linear\" vetiver_create_rsconnect_bundle(     b,     \"cars_linear\",     predict_args = list(debug = TRUE) ) }"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"R Markdown format for model monitoring dashboards — vetiver_dashboard","title":"R Markdown format for model monitoring dashboards — vetiver_dashboard","text":"R Markdown format model monitoring dashboards","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R Markdown format for model monitoring dashboards — vetiver_dashboard","text":"","code":"vetiver_dashboard(pins = list(), display_pins = TRUE, ...)  get_vetiver_dashboard_pins()  pin_example_kc_housing_model(board = pins::board_local(), name = \"seattle_rf\")"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_dashboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R Markdown format for model monitoring dashboards — vetiver_dashboard","text":"pins list containing board, name, version, pins::pin_read() display_pins dashboard display link pin(s)? Defaults TRUE, creates link pin contains URL metadata. ... Arguments passed flexdashboard::flex_dashboard() board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_dashboard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R Markdown format for model monitoring dashboards — vetiver_dashboard","text":"vetiver_dashboard() function specialized type flexdashboard. See flexdashboard website additional documentation: https://pkgs.rstudio.com/flexdashboard/ knitting example vetiver_dashboard() template, execute helper function pin_example_kc_housing_model() set demonstration model metrics pins needed monitoring demo. function : fit example model training data pin vetiver model pins::board_local() compute metrics testing data pin metrics local board steps need complete setting monitoring real model.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_rsconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy a vetiver model API to Posit Connect — vetiver_deploy_rsconnect","title":"Deploy a vetiver model API to Posit Connect — vetiver_deploy_rsconnect","text":"Use vetiver_deploy_rsconnect() deploy vetiver_model() versioned stored via vetiver_pin_write() Plumber API Posit Connect.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_rsconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy a vetiver model API to Posit Connect — vetiver_deploy_rsconnect","text":"","code":"vetiver_deploy_rsconnect(   board,   name,   version = NULL,   predict_args = list(),   appTitle = glue::glue(\"{name} model API\"),   ...,   additional_pkgs = character(0) )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_rsconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy a vetiver model API to Posit Connect — vetiver_deploy_rsconnect","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. predict_args list optional arguments passed vetiver_api() prediction type. appTitle API title Posit Connect. Use default based name, pass title. ... arguments passed rsconnect::deployApp() appName, account, launch.browser. additional_pkgs additional R packages need attached via library() run API, character vector.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_rsconnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy a vetiver model API to Posit Connect — vetiver_deploy_rsconnect","text":"deployment success (TRUE FALSE), invisibly.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_rsconnect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deploy a vetiver model API to Posit Connect — vetiver_deploy_rsconnect","text":"two functions vetiver_deploy_rsconnect() vetiver_create_rsconnect_bundle() alternatives , providing different strategies deploying vetiver model API Posit Connect. first deploy Connect, API accessible . can change access settings others can also access API. access settings \"Anyone - login required\", anyone querying API (including ) need pass authentication details API call, shown Connect documentation.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_rsconnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy a vetiver model API to Posit Connect — vetiver_deploy_rsconnect","text":"","code":"library(pins) b <- board_temp(versioned = TRUE) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v) #> Creating new version '20251028T174725Z-2c3c1' #> Writing to pin 'cars_linear' #>  #> Create a Model Card for your published model #> • Model Cards provide a framework for transparent, responsible reporting #> • Use the vetiver `.Rmd` template as a place to start #> This message is displayed once per session.  if (FALSE) { ## pass args for predicting: vetiver_deploy_rsconnect(     b,     \"user.name/cars_linear\",     predict_args = list(debug = TRUE) )  ## specify an account name through `...`: vetiver_deploy_rsconnect(     b,     \"user.name/cars_linear\",     account = \"user.name\" ) }"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_sagemaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy a vetiver model API to Amazon SageMaker — vetiver_deploy_sagemaker","title":"Deploy a vetiver model API to Amazon SageMaker — vetiver_deploy_sagemaker","text":"Use vetiver_deploy_sagemaker() deploy vetiver_model() versioned stored via vetiver_pin_write() Plumber API Amazon SageMaker.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_sagemaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy a vetiver model API to Amazon SageMaker — vetiver_deploy_sagemaker","text":"","code":"vetiver_deploy_sagemaker(   board,   name,   instance_type,   ...,   predict_args = list(),   docker_args = list(),   build_args = list(),   endpoint_args = list(),   repo_name = glue(\"vetiver-sagemaker-{name}\") )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_sagemaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy a vetiver model API to Amazon SageMaker — vetiver_deploy_sagemaker","text":"board AWS S3 board created pins::board_s3(). board must correct region SageMaker instance. name Pin name. instance_type Type EC2 instance use; see Amazon SageMaker pricing. ... currently used. predict_args list optional arguments passed vetiver_api() prediction type. docker_args list optional arguments passed vetiver_write_docker() lockfile name whether use rspm. pass additional_pkgs , function uses additional_pkgs = required_pkgs(board). build_args list optional arguments passed vetiver_sm_build() model version compute_type. endpoint_args list optional arguments passed vetiver_sm_endpoint() accelerator_type data_capture_config. repo_name name AWS ECR repository store model.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_sagemaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy a vetiver model API to Amazon SageMaker — vetiver_deploy_sagemaker","text":"deployed vetiver_endpoint_sagemaker().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_sagemaker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deploy a vetiver model API to Amazon SageMaker — vetiver_deploy_sagemaker","text":"function stores model deployment image bucket used board. function vetiver_deploy_sagemaker() uses: vetiver_sm_build() build push Docker image ECR, vetiver_sm_model() create SageMaker model, vetiver_sm_endpoint() deploy SageMaker model endpoint. modular functions available advanced use cases. working locally, likely need explicitly set execution role work correctly. Check \"Execution role requirements\" smdocker documentation, especially note bucket containing vetiver model needs added resource IAM role policy.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_deploy_sagemaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy a vetiver model API to Amazon SageMaker — vetiver_deploy_sagemaker","text":"","code":"if (FALSE) { library(pins) b <- board_s3(bucket = \"my-existing-bucket\") cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v)  endpoint <- vetiver_deploy_sagemaker(     board = b,     name = \"cars_linear\",     instance_type = \"ml.t2.medium\",     predict_args = list(type = \"class\", debug = TRUE) ) }"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model API endpoint object for prediction — vetiver_endpoint","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"function creates model API endpoint prediction URL. HTTP calls made actually predict() endpoint.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"","code":"vetiver_endpoint(url)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"url API endpoint URL","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"new vetiver_endpoint object","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"","code":"vetiver_endpoint(\"https://colorado.rstudio.com/rsc/seattle-housing/predict\") #>  #> ── A model API endpoint for prediction:  #> https://colorado.rstudio.com/rsc/seattle-housing/predict"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint_sagemaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SageMaker model API endpoint object for prediction — vetiver_endpoint_sagemaker","title":"Create a SageMaker model API endpoint object for prediction — vetiver_endpoint_sagemaker","text":"function creates model API endpoint prediction Sagemaker Model. HTTP calls made actually predict() endpoint.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint_sagemaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SageMaker model API endpoint object for prediction — vetiver_endpoint_sagemaker","text":"","code":"vetiver_endpoint_sagemaker(model_endpoint)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint_sagemaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SageMaker model API endpoint object for prediction — vetiver_endpoint_sagemaker","text":"model_endpoint name Amazon SageMaker model endpoint.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint_sagemaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SageMaker model API endpoint object for prediction — vetiver_endpoint_sagemaker","text":"new vetiver_endpoint_sagemaker object","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_endpoint_sagemaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SageMaker model API endpoint object for prediction — vetiver_endpoint_sagemaker","text":"","code":"vetiver_endpoint_sagemaker(\"vetiver-sagemaker-demo-model\") #>  #> ── A SageMaker model endpoint for prediction:  #> Model endpoint: vetiver-sagemaker-demo-model #> Region:"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vetiver object for deployment of a trained model — vetiver_model","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"vetiver_model() object collects information needed store, version, deploy trained model. vetiver_model() object created, can: store version pin vetiver_pin_write() create API endpoint vetiver_api()","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"","code":"vetiver_model(   model,   model_name,   ...,   description = NULL,   metadata = list(),   save_prototype = TRUE,   save_ptype = deprecated(),   versioned = NULL )  new_vetiver_model(   model,   model_name,   description,   metadata,   prototype,   versioned )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"model trained model, lm() model tidymodels workflows::workflow(). model_name Model name ID. ... method-specific arguments passed vetiver_ptype() compute input data prototype, prototype_data (sample training features). description detailed description model. omitted, brief description model generated. metadata list containing additional metadata store pin. retrieving pin, stored user key, avoid potential clashes metadata pins uses. save_prototype input data prototype stored model? options TRUE (default, stores zero-row slice training data), FALSE (input data prototype visual documentation checking), dataframe used checking prediction time examples API visual documentation. save_ptype  versioned model object versioned stored vetiver_pin_write()? default, NULL, use default board store model. prototype input data prototype. NULL, checking new data prediction time.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"new vetiver_model object.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"can provide data save_prototype use examples visual documentation created vetiver_api(). , consider checking input data prototype structure training data (perhaps hardhat::scream()) /simulating data avoid leaking PII via deployed model. models, like ranger::ranger(), keras, luz (torch), require pass example training data prototype_data else explicitly set save_prototype = FALSE. non-rectangular data input models, image input keras torch model, currently recommend turn prototype checking via save_prototype = FALSE.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"","code":"cars_lm <- lm(mpg ~ ., data = mtcars) vetiver_model(cars_lm, \"cars-linear\") #>  #> ── cars-linear ─ <butchered_lm> model for deployment  #> An OLS linear regression model using 10 features"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Update model metrics over time for monitoring — vetiver_pin_metrics","title":"Update model metrics over time for monitoring — vetiver_pin_metrics","text":"three functions can used model monitoring (monitoring dashboard): vetiver_compute_metrics() computes metrics (accuracy classification model RMSE regression model) chosen time aggregation period vetiver_pin_metrics() updates existing pin storing model metrics time vetiver_plot_metrics() creates plot metrics time","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update model metrics over time for monitoring — vetiver_pin_metrics","text":"","code":"vetiver_pin_metrics(   board,   df_metrics,   metrics_pin_name,   .index = .index,   overwrite = FALSE,   type = NULL,   ... )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update model metrics over time for monitoring — vetiver_pin_metrics","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. df_metrics tidy dataframe metrics time, created vetiver_compute_metrics(). metrics_pin_name Pin name metrics stored (opposed model object stored vetiver_pin_write()). .index variable df_metrics containing aggregated dates date-times (time_var data). Defaults .index. overwrite FALSE (default), error new metrics contain overlapping dates existing pin.TRUE, overwrite metrics dates exist existing pin new metrics new values. type File type used save metrics disk. default NULL, uses type existing pin. Options \"rds\" \"arrow\". ... Additional arguments passed methods specific board.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update model metrics over time for monitoring — vetiver_pin_metrics","text":"dataframe metrics.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update model metrics over time for monitoring — vetiver_pin_metrics","text":"Sometimes monitor model given time aggregation, may end dates new metrics (like new_metrics example) dates existing aggregated metrics (like original_metrics example). can happen need re-run monitoring report something failed. overwrite = FALSE (default), vetiver_pin_metrics() error overlapping dates. overwrite = TRUE, vetiver_pin_metrics() replace metrics new values. probably want FALSE interactive use TRUE dashboards reports run schedule. can initially create pin type = \"arrow\" default (type = \"rds\"). vetiver_pin_metrics() update pin using type default.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update model metrics over time for monitoring — vetiver_pin_metrics","text":"","code":"library(dplyr) library(parsnip) data(Chicago, package = \"modeldata\") Chicago <- Chicago %>% select(ridership, date, all_of(stations)) training_data <- Chicago %>% filter(date < \"2009-01-01\") testing_data <- Chicago %>% filter(date >= \"2009-01-01\", date < \"2011-01-01\") monitoring <- Chicago %>% filter(date >= \"2011-01-01\", date < \"2012-12-31\") lm_fit <- linear_reg() %>% fit(ridership ~ ., data = training_data)  library(pins) b <- board_temp()  ## before starting monitoring, initiate the metrics and pin ## (for example, with the testing data): original_metrics <-     augment(lm_fit, new_data = testing_data) %>%     vetiver_compute_metrics(date, \"week\", ridership, .pred, every = 4L) pin_write(b, original_metrics, \"lm_fit_metrics\", type = \"arrow\") #> Creating new version '20251028T174727Z-4eb11' #> Writing to pin 'lm_fit_metrics'  ## to continue monitoring with new data, compute metrics and update pin: new_metrics <-     augment(lm_fit, new_data = monitoring) %>%     vetiver_compute_metrics(date, \"week\", ridership, .pred, every = 4L) vetiver_pin_metrics(b, new_metrics, \"lm_fit_metrics\") #> Replacing version '20251028T174727Z-4eb11' with #> '20251028T174727Z-bd441' #> Writing to pin 'lm_fit_metrics' #> # A tibble: 162 × 5 #>    .index        .n .metric .estimator .estimate #>    <date>     <int> <chr>   <chr>          <dbl> #>  1 2009-01-01     7 rmse    standard       6.78  #>  2 2009-01-01     7 rsq     standard       0.154 #>  3 2009-01-01     7 mae     standard       5.25  #>  4 2009-01-08    28 rmse    standard       4.61  #>  5 2009-01-08    28 rsq     standard       0.576 #>  6 2009-01-08    28 mae     standard       2.98  #>  7 2009-02-05    28 rmse    standard       1.90  #>  8 2009-02-05    28 rsq     standard       0.916 #>  9 2009-02-05    28 mae     standard       1.17  #> 10 2009-03-05    28 rmse    standard       1.24  #> # ℹ 152 more rows"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write a trained model to a board of models — vetiver_pin_write","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"Use vetiver_pin_write() pin trained model board models, along input prototype new data model metadata. Use vetiver_pin_read() retrieve pinned object.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"","code":"vetiver_pin_write(board, vetiver_model, ..., check_renv = FALSE)  vetiver_pin_read(board, name, version = NULL, check_renv = FALSE)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. vetiver_model deployable vetiver_model() object ... Additional arguments passed methods specific board. check_renv Use renv record packages used training time vetiver_pin_write() check differences vetiver_pin_read(). Defaults FALSE. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"vetiver_pin_read() returns vetiver_model(); vetiver_pin_write() returns name new pin, invisibly.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"functions read write vetiver_model() pin specified board containing model object elements needed prediction, model's input data prototype packages needed prediction time. may use pins::pin_read() pins::pin_meta() handle pin, vetiver_pin_read() returns vetiver_model() object ready deployment.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pin_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"","code":"library(pins) model_board <- board_temp()  cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(model_board, v) #> Creating new version '20251028T174728Z-2c3c1' #> Writing to pin 'cars_linear' model_board #> Pin board <pins_board_folder> #> Path: '/tmp/RtmpjYNBwO/pins-1e227b3bc14d' #> Cache size: 0  vetiver_pin_read(model_board, \"cars_linear\") #>  #> ── cars_linear ─ <butchered_lm> model for deployment  #> An OLS linear regression model using 10 features  # can use `version` argument to read a specific version: pin_versions(model_board, \"cars_linear\") #> # A tibble: 1 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20251028T174728Z-2c3c1 2025-10-28 17:47:28 2c3c1 # can store an renv lockfile as part of the pin: vetiver_pin_write(model_board, v, check_renv = TRUE) #> Error in pin_store(board, name, path, meta, versioned = versioned, x = x,     ...): The new version \"20251028T174728Z-2c3c1\" is the same as the #> most recent version. #> ℹ Did you try to create a new version with the same timestamp as the #>   last version?"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_plot_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model metrics over time for monitoring — vetiver_plot_metrics","title":"Plot model metrics over time for monitoring — vetiver_plot_metrics","text":"three functions can used model monitoring (monitoring dashboard): vetiver_compute_metrics() computes metrics (accuracy classification model RMSE regression model) chosen time aggregation period vetiver_pin_metrics() updates existing pin storing model metrics time vetiver_plot_metrics() creates plot metrics time","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_plot_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model metrics over time for monitoring — vetiver_plot_metrics","text":"","code":"vetiver_plot_metrics(   df_metrics,   .index = .index,   .estimate = .estimate,   .metric = .metric,   .n = .n )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_plot_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model metrics over time for monitoring — vetiver_plot_metrics","text":"df_metrics tidy dataframe metrics time, created vetiver_compute_metrics(). .index variable df_metrics containing aggregated dates date-times (time_var data). Defaults .index. .estimate variable df_metrics containing metric estimate. Defaults .estimate. .metric variable df_metrics containing metric type. Defaults .metric. .n variable df_metrics containing number observations used estimating metric.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_plot_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot model metrics over time for monitoring — vetiver_plot_metrics","text":"ggplot2 object.","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_plot_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot model metrics over time for monitoring — vetiver_plot_metrics","text":"","code":"library(dplyr) library(parsnip) data(Chicago, package = \"modeldata\") Chicago <- Chicago %>% select(ridership, date, all_of(stations)) training_data <- Chicago %>% filter(date < \"2009-01-01\") testing_data <- Chicago %>% filter(date >= \"2009-01-01\", date < \"2011-01-01\") monitoring <- Chicago %>% filter(date >= \"2011-01-01\", date < \"2012-12-31\") lm_fit <- linear_reg() %>% fit(ridership ~ ., data = training_data)  library(pins) b <- board_temp()  ## before starting monitoring, initiate the metrics and pin ## (for example, with the testing data): original_metrics <-     augment(lm_fit, new_data = testing_data) %>%     vetiver_compute_metrics(date, \"week\", ridership, .pred, every = 4L) pin_write(b, original_metrics, \"lm_fit_metrics\", type = \"arrow\") #> Creating new version '20251028T174729Z-4eb11' #> Writing to pin 'lm_fit_metrics'  ## to continue monitoring with new data, compute metrics and update pin: new_metrics <-     augment(lm_fit, new_data = monitoring) %>%     vetiver_compute_metrics(date, \"week\", ridership, .pred, every = 4L) vetiver_pin_metrics(b, new_metrics, \"lm_fit_metrics\") #> Replacing version '20251028T174729Z-4eb11' with #> '20251028T174729Z-bd441' #> Writing to pin 'lm_fit_metrics' #> # A tibble: 162 × 5 #>    .index        .n .metric .estimator .estimate #>    <date>     <int> <chr>   <chr>          <dbl> #>  1 2009-01-01     7 rmse    standard       6.78  #>  2 2009-01-01     7 rsq     standard       0.154 #>  3 2009-01-01     7 mae     standard       5.25  #>  4 2009-01-08    28 rmse    standard       4.61  #>  5 2009-01-08    28 rsq     standard       0.576 #>  6 2009-01-08    28 mae     standard       2.98  #>  7 2009-02-05    28 rmse    standard       1.90  #>  8 2009-02-05    28 rsq     standard       0.916 #>  9 2009-02-05    28 mae     standard       1.17  #> 10 2009-03-05    28 rmse    standard       1.24  #> # ℹ 152 more rows  library(ggplot2) vetiver_plot_metrics(new_metrics) +     scale_size(range = c(2, 4))"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pr_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_pr_predict","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_pr_predict","text":"function deprecated use vetiver_api directly instead.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pr_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_pr_predict","text":"","code":"vetiver_pr_predict(   pr,   vetiver_model,   path = \"/predict\",   debug = is_interactive(),   ... )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_pr_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_pr_predict","text":"pr Plumber router, plumber::pr(). vetiver_model deployable vetiver_model() object path endpoint path debug TRUE provides insight API errors. ... arguments passed predict(), prediction type","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_prepare_docker.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate files necessary to build a Docker container for a vetiver model — vetiver_prepare_docker","title":"Generate files necessary to build a Docker container for a vetiver model — vetiver_prepare_docker","text":"Deploying vetiver model via Docker requires several files. Use function create needed files directory located path.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_prepare_docker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate files necessary to build a Docker container for a vetiver model — vetiver_prepare_docker","text":"","code":"vetiver_prepare_docker(   board,   name,   version = NULL,   path = \".\",   predict_args = list(),   docker_args = list() )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_prepare_docker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate files necessary to build a Docker container for a vetiver model — vetiver_prepare_docker","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. path path write Plumber file, Dockerfile, lockfile, capturing model's dependencies. predict_args list optional arguments passed vetiver_api() prediction type. docker_args list optional arguments passed vetiver_write_docker() lockfile name whether use rspm. pass additional_pkgs , function uses additional_pkgs = required_pkgs(board).","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_prepare_docker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate files necessary to build a Docker container for a vetiver model — vetiver_prepare_docker","text":"invisible TRUE.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_prepare_docker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate files necessary to build a Docker container for a vetiver model — vetiver_prepare_docker","text":"function vetiver_prepare_docker() uses: vetiver_write_plumber() create Plumber file vetiver_write_docker() create Dockerfile renv lockfile modular functions available advanced use cases. models keras torch, need edit generated Dockerfile , example, COPY requirements.txt requirements.txt similar.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_prepare_docker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate files necessary to build a Docker container for a vetiver model — vetiver_prepare_docker","text":"","code":"library(pins) b <- board_temp(versioned = TRUE) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v) #> Creating new version '20251028T174731Z-2c3c1' #> Writing to pin 'cars_linear'  vetiver_prepare_docker(b, \"cars_linear\", path = tempdir()) #> The following required packages are not installed: #> - cpp11  [required by lobstr, readr, tzdb, and 1 other] #> Consider reinstalling these packages before snapshotting the lockfile. #>  #> The following package(s) will be updated in the lockfile: #>  #> # Local --------------------------------------------------------------- #> - vetiver       [* -> 0.2.6] #>  #> # RSPM ---------------------------------------------------------------- #> - R6            [* -> 2.6.1] #> - Rcpp          [* -> 1.1.0] #> - askpass       [* -> 1.2.1] #> - bit           [* -> 4.6.0] #> - bit64         [* -> 4.6.0-1] #> - bundle        [* -> 0.1.2] #> - butcher       [* -> 0.3.6] #> - cereal        [* -> 0.1.0] #> - cli           [* -> 3.6.5] #> - clipr         [* -> 0.8.0] #> - crayon        [* -> 1.5.3] #> - curl          [* -> 7.0.0] #> - digest        [* -> 0.6.37] #> - fastmap       [* -> 1.2.0] #> - fs            [* -> 1.6.6] #> - generics      [* -> 0.1.4] #> - glue          [* -> 1.8.0] #> - hardhat       [* -> 1.4.2] #> - hms           [* -> 1.1.4] #> - httpuv        [* -> 1.6.16] #> - httr          [* -> 1.4.7] #> - jsonlite      [* -> 2.0.0] #> - later         [* -> 1.4.4] #> - lifecycle     [* -> 1.0.4] #> - lobstr        [* -> 1.1.2] #> - magrittr      [* -> 2.0.4] #> - mime          [* -> 0.13] #> - openssl       [* -> 2.3.4] #> - otel          [* -> 0.2.0] #> - pillar        [* -> 1.11.1] #> - pins          [* -> 1.4.1] #> - pkgconfig     [* -> 2.0.3] #> - plumber       [* -> 1.3.0] #> - prettyunits   [* -> 1.2.0] #> - progress      [* -> 1.2.3] #> - promises      [* -> 1.4.0] #> - purrr         [* -> 1.1.0] #> - rapidoc       [* -> 9.3.4] #> - rappdirs      [* -> 0.3.3] #> - readr         [* -> 2.1.5] #> - renv          [* -> 1.1.5] #> - rlang         [* -> 1.1.6] #> - sodium        [* -> 1.4.0] #> - sparsevctrs   [* -> 0.3.4] #> - stringi       [* -> 1.8.7] #> - swagger       [* -> 5.17.14.1] #> - sys           [* -> 3.4.3] #> - tibble        [* -> 3.3.0] #> - tidyselect    [* -> 1.2.1] #> - tzdb          [* -> 0.5.0] #> - utf8          [* -> 1.2.6] #> - vctrs         [* -> 0.6.5] #> - vroom         [* -> 1.6.6] #> - webutils      [* -> 1.2.2] #> - whisker       [* -> 0.4.1] #> - withr         [* -> 3.0.2] #> - yaml          [* -> 2.3.10] #>  #> The version of R recorded in the lockfile will be updated: #> - R             [* -> 4.5.1] #>  #> - Lockfile written to \"vetiver_renv.lock\"."},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_python_requirements.html","id":null,"dir":"Reference","previous_headings":"","what":"Use extra files required for deployment — vetiver_python_requirements.keras.engine.training.Model","title":"Use extra files required for deployment — vetiver_python_requirements.keras.engine.training.Model","text":"Create files required deploying app generated via vetiver_write_plumber(), Python requirements.txt .Renviron","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_python_requirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use extra files required for deployment — vetiver_python_requirements.keras.engine.training.Model","text":"","code":"# S3 method for class 'keras.engine.training.Model' vetiver_python_requirements(model)  # S3 method for class 'luz_module_fitted' vetiver_renviron_requirements(model)  vetiver_python_requirements(model)  # Default S3 method vetiver_python_requirements(model)  vetiver_renviron_requirements(model)  # Default S3 method vetiver_renviron_requirements(model)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_python_requirements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use extra files required for deployment — vetiver_python_requirements.keras.engine.training.Model","text":"model trained model, lm() model tidymodels workflows::workflow().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy a vetiver model API to Amazon SageMaker with modular functions — vetiver_sm_build","title":"Deploy a vetiver model API to Amazon SageMaker with modular functions — vetiver_sm_build","text":"Use function vetiver_deploy_sagemaker() basic deployment SageMaker, three functions together advanced use cases: vetiver_sm_build() generates builds Docker image SageMaker vetiver model vetiver_sm_model() creates Amazon SageMaker model vetiver_sm_endpoint() deploys Amazon SageMaker model endpoint","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy a vetiver model API to Amazon SageMaker with modular functions — vetiver_sm_build","text":"","code":"vetiver_sm_build(   board,   name,   version = NULL,   path = fs::dir_create(tempdir(), \"vetiver\"),   predict_args = list(),   docker_args = list(),   repository = NULL,   compute_type = c(\"BUILD_GENERAL1_SMALL\", \"BUILD_GENERAL1_MEDIUM\",     \"BUILD_GENERAL1_LARGE\", \"BUILD_GENERAL1_2XLARGE\"),   role = NULL,   bucket = NULL,   vpc_id = NULL,   subnet_ids = list(),   security_group_ids = list(),   log = TRUE,   ... )  vetiver_sm_model(   image_uri,   model_name,   role = NULL,   vpc_config = list(),   enable_network_isolation = FALSE,   tags = list() )  vetiver_sm_endpoint(   model_name,   instance_type,   endpoint_name = NULL,   initial_instance_count = 1,   accelerator_type = NULL,   tags = list(),   kms_key = NULL,   data_capture_config = list(),   volume_size = NULL,   model_data_download_timeout = NULL,   wait = TRUE )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy a vetiver model API to Amazon SageMaker with modular functions — vetiver_sm_build","text":"board AWS S3 board created pins::board_s3(). board must correct region SageMaker instance. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. path path write Plumber file, Dockerfile, lockfile, capturing model's dependencies. predict_args list optional arguments passed vetiver_api() prediction type. docker_args list optional arguments passed vetiver_write_docker() lockfile name whether use rspm. pass additional_pkgs , function uses additional_pkgs = required_pkgs(board). repository ECR repository tag image character. Defaults sagemaker-studio-${domain_id}:latest. compute_type CodeBuild compute type character. Defaults BUILD_GENERAL1_SMALL. role ARN IAM role name (character) used : CodeBuild vetiver_sm_build() SageMaker model vetiver_sm_model() Defaults SageMaker Studio execution role. bucket S3 bucket use sending data CodeBuild character. Defaults SageMaker SDK default bucket. vpc_id ID VPC host CodeBuild project \"vpc-05c09f91d48831c8c\". subnet_ids List subnet IDs CodeBuild project, list(\"subnet-0b31f1863e9d31a67\"). security_group_ids List security group IDs CodeBuild project, list(\"sg-0ce4ec0d0414d2ddc\"). log logical show logs running CodeBuild build. Defaults TRUE. ... Docker build parameters (Use \"_\" instead \"-\"; example, Docker optional parameter build-arg becomes build_arg). image_uri AWS ECR image URI Amazon SageMaker Model created (example, returned vetiver_sm_build()). model_name Amazon SageMaker model name deployed. vpc_config list containing VPC configuration Amazon SageMaker model API VpcConfig (optional). Subnets: List subnet ids SecurityGroupIds: List security group ids enable_network_isolation logical specify whether container run network isolation mode. Defaults FALSE. tags named list tags labeling Amazon SageMaker model model endpint created. instance_type Type EC2 instance use; see Amazon SageMaker pricing. endpoint_name name use Amazon SageMaker model endpoint created, different model_name. initial_instance_count initial number instances run endpoint. accelerator_type Type Elastic Inference accelerator attach endpoint model loading inference, example, \"ml.eia1.medium\". kms_key ARN KMS key used encrypt data storage volume attached instance hosting endpoint. data_capture_config list configuration control Amazon SageMaker captures inference data. volume_size size, GB, ML storage volume attached individual inference instance associated production variant. Currently Amazon EBS gp2 storage volumes supported. model_data_download_timeout timeout value, seconds, download extract model data Amazon S3. wait logical whether wait endpoint deployed. Defaults TRUE.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy a vetiver model API to Amazon SageMaker with modular functions — vetiver_sm_build","text":"vetiver_sm_build() returns AWS ECR image URI vetiver_sm_model() returns model name (characters). vetiver_sm_endpoint() returns new vetiver_endpoint_sagemaker() object.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_build.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deploy a vetiver model API to Amazon SageMaker with modular functions — vetiver_sm_build","text":"function vetiver_sm_build() generates files necessary build Docker container deploy vetiver model SageMaker builds image AWS CodeBuild. resulting image stored AWS ECR. function creates Plumber file Dockerfile appropriate SageMaker, example, path = \"/invocations\" port = 8080. run problems Docker rate limits, either authenticate Docker SageMaker, use public ECR base image, passed docker_args","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy a vetiver model API to Amazon SageMaker with modular functions — vetiver_sm_build","text":"","code":"if (FALSE) { library(pins) b <- board_s3(bucket = \"my-existing-bucket\") cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v)  new_image_uri <- vetiver_sm_build(     board = b,     name = \"cars_linear\",     predict_args = list(type = \"class\", debug = TRUE),     docker_args = list(         base_image = \"FROM public.ecr.aws/docker/library/r-base:4.2.2\"     ) )  model_name <- vetiver_sm_model(     new_image_uri,     tags = list(\"my_custom_tag\" = \"fuel_efficiency\") )  vetiver_sm_endpoint(model_name, \"ml.t2.medium\") }"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Amazon SageMaker model, endpoint, and endpoint configuration — vetiver_sm_delete","title":"Delete Amazon SageMaker model, endpoint, and endpoint configuration — vetiver_sm_delete","text":"Use function delete Amazon SageMaker components used vetiver_endpoint_sagemaker() object. function delete pinned model object S3.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Amazon SageMaker model, endpoint, and endpoint configuration — vetiver_sm_delete","text":"","code":"vetiver_sm_delete(object, delete_model = TRUE, delete_endpoint = TRUE)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Amazon SageMaker model, endpoint, and endpoint configuration — vetiver_sm_delete","text":"object model API endpoint object deleted, created vetiver_endpoint_sagemaker(). delete_model Delete SageMaker model? Defaults TRUE. delete_endpoint Delete endpoint endpoint configuration? Defaults TRUE.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_sm_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete Amazon SageMaker model, endpoint, and endpoint configuration — vetiver_sm_delete","text":"TRUE, invisibly","code":""},{"path":[]},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_type_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert new data at prediction time using input data prototype — vetiver_type_convert","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"developer-facing function, useful supporting new model types. prediction time, new observations typically must checked sometimes converted data types training time.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_type_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"","code":"vetiver_type_convert(new_data, ptype)"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_type_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"new_data New data making predictions, data frame. ptype input data prototype, 0-row slice training data","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_type_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"converted dataframe","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_type_convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"","code":"library(tibble) training_df <- tibble(x = as.Date(\"2021-01-01\") + 0:9,                       y = LETTERS[1:10], z = letters[11:20]) training_df #> # A tibble: 10 × 3 #>    x          y     z     #>    <date>     <chr> <chr> #>  1 2021-01-01 A     k     #>  2 2021-01-02 B     l     #>  3 2021-01-03 C     m     #>  4 2021-01-04 D     n     #>  5 2021-01-05 E     o     #>  6 2021-01-06 F     p     #>  7 2021-01-07 G     q     #>  8 2021-01-08 H     r     #>  9 2021-01-09 I     s     #> 10 2021-01-10 J     t      prototype <- vctrs::vec_slice(training_df, 0) vetiver_type_convert(tibble(x = \"2021-02-01\", y = \"J\", z = \"k\"), prototype) #> # A tibble: 1 × 3 #>   x          y     z     #>   <date>     <chr> <chr> #> 1 2021-02-01 J     k      ## unsuccessful conversion generates an error: try(vetiver_type_convert(tibble(x = \"potato\", y = \"J\", z = \"k\"), prototype)) #> Error in vetiver_type_convert(tibble(x = \"potato\", y = \"J\", z = \"k\"),  :  #>   [0, 1]: expected date like , but got 'potato'  ## error for missing column: try(vetiver_type_convert(tibble(x = \"potato\", y = \"J\"), prototype)) #> Error in hardhat::validate_column_names(new_data, colnames(ptype)) :  #>   The required column \"z\" is missing."},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_docker.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Dockerfile for a vetiver model — vetiver_write_docker","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"creating Plumber file vetiver_write_plumber(), use vetiver_write_docker() create Dockerfile plus vetiver_renv.lock file pinned vetiver_model().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_docker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"","code":"vetiver_write_docker(   vetiver_model,   plumber_file = \"plumber.R\",   path = \".\",   ...,   lockfile = \"vetiver_renv.lock\",   rspm = TRUE,   base_image = glue::glue(\"FROM rocker/r-ver:{getRversion()}\"),   port = 8000,   expose = TRUE,   additional_pkgs = character(0) )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_docker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"vetiver_model deployable vetiver_model() object plumber_file path Plumber file, created via vetiver_write_plumber(). Defaults plumber.R working directory. path path write Dockerfile lockfile, capturing model's package dependencies. Defaults working directory. ... currently used. lockfile generated lockfile path. Defaults \"vetiver_renv.lock\". rspm logical use RStudio Public Package Manager renv::restore() Docker image. Defaults TRUE. base_image base Docker image start . Defaults rocker/r-ver version R working , models like keras require different base image. port server port listening: number 8080 expression like '.numeric(Sys.getenv(\"PORT\"))' port injected environment variable. expose Add EXPOSE Dockerfile? helpful using Docker Desktop work expression port. additional_pkgs character vector additional package names add Docker image. example, boards like pins::board_s3() require additional software; can use required_pkgs(board) .","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_docker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"content Dockerfile, invisibly.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_docker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"","code":"library(pins) tmp_plumber <- tempfile() b <- board_temp(versioned = TRUE) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v) #> Creating new version '20251028T174733Z-2c3c1' #> Writing to pin 'cars_linear' vetiver_write_plumber(b, \"cars_linear\", file = tmp_plumber)  ## default port vetiver_write_docker(v, tmp_plumber, tempdir()) #> The following required packages are not installed: #> - cpp11  [required by lobstr, readr, tzdb, and 1 other] #> Consider reinstalling these packages before snapshotting the lockfile. #>  #> - The lockfile is already up to date. ## install more pkgs, like those required to access board vetiver_write_docker(v, tmp_plumber, tempdir(),                      additional_pkgs = required_pkgs(b)) #> The following required packages are not installed: #> - cpp11  [required by lobstr, readr, tzdb, and 1 other] #> Consider reinstalling these packages before snapshotting the lockfile. #>  #> - The lockfile is already up to date. ## port from env variable vetiver_write_docker(v, tmp_plumber, tempdir(),                      port = 'as.numeric(Sys.getenv(\"PORT\"))',                      expose = FALSE) #> The following required packages are not installed: #> - cpp11  [required by lobstr, readr, tzdb, and 1 other] #> Consider reinstalling these packages before snapshotting the lockfile. #>  #> - The lockfile is already up to date."},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_plumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"Use vetiver_write_plumber() create plumber.R file vetiver_model() versioned stored via vetiver_pin_write().","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_plumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"","code":"vetiver_write_plumber(   board,   name,   version = NULL,   ...,   file = \"plumber.R\",   rsconnect = TRUE,   additional_pkgs = character(0) )"},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_plumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. ... arguments passed vetiver_api() endpoint path prediction type. file path write Plumber file. Defaults plumber.R working directory. See plumber::plumb() naming precedence rules. rsconnect Create Plumber file features needed Posit Connect? Defaults TRUE. additional_pkgs additional R packages need attached via library() run API, character vector.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_plumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"content plumber.R file, invisibly.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_plumber.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"default, function find use latest version vetiver model; model API (deployed) linked specific version. can override default behavior choosing specific version.","code":""},{"path":"https://rstudio.github.io/vetiver-r/reference/vetiver_write_plumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"","code":"library(pins) tmp <- tempfile() b <- board_temp(versioned = TRUE) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v) #> Creating new version '20251028T174735Z-2c3c1' #> Writing to pin 'cars_linear'  vetiver_write_plumber(b, \"cars_linear\", file = tmp)"},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-026","dir":"Changelog","previous_headings":"","what":"vetiver 0.2.6","title":"vetiver 0.2.6","text":"CRAN release: 2025-10-28 Added new additional_pkgs argument writing plumber files (#271). Updated use recipes’ new ability provide input data prototype (#287). Added support probably (#294).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-025","dir":"Changelog","previous_headings":"","what":"vetiver 0.2.5","title":"vetiver 0.2.5","text":"CRAN release: 2023-11-16 Fixed bug generating plumber files (#257).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-024","dir":"Changelog","previous_headings":"","what":"vetiver 0.2.4","title":"vetiver 0.2.4","text":"CRAN release: 2023-09-12 Fixed plumber files generated board_url() (#241).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-023","dir":"Changelog","previous_headings":"","what":"vetiver 0.2.3","title":"vetiver 0.2.3","text":"CRAN release: 2023-08-14 Updated test involving renv rsconnect (#230).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-022","dir":"Changelog","previous_headings":"","what":"vetiver 0.2.2","title":"vetiver 0.2.2","text":"CRAN release: 2023-07-03 Fixed bug vetiver_write_docker() writes renv lockfile (#212). Added new /prototype GET endpoint model’s input data prototype (#220).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-021","dir":"Changelog","previous_headings":"","what":"vetiver 0.2.1","title":"vetiver 0.2.1","text":"CRAN release: 2023-05-16 Added support keras (#164), recipes (#179), luz (#187, @dfalbel). Moved required_pkgs metadata stored remotely, binary blob plain text YAML (#176). Added optional renv lockfile can stored remotely model metadata, new check_renv argument reading/writing (#154, #192). Exposed new base_image argument creating Dockerfiles (#182). Added new vetiver_deploy_sagemaker() function plus vetiver_endpoint_sagemaker() needed functionality deploying Amazon SageMaker (#186, @DyfanJones). Added new additional GET endpoint model /metadata (#194).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-020","dir":"Changelog","previous_headings":"","what":"vetiver 0.2.0","title":"vetiver 0.2.0","text":"CRAN release: 2023-01-26","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"vetiver 0.2.0","text":"vetiver_model(), now use save_prototype. vetiver_api(), now use check_prototype.","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"other-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"vetiver 0.2.0","text":"Added support k-Prototypes clustering clustMixType (#163, thanks @galen-ft). Now vendor renv directly package (#157). Fixed vetiver_ptype() finds predictors models (lm() glm()) interactions (#160). New argument added vetiver_write_docker() pass additional packages installed, required_pkgs(board) (#159). New function vetiver_prepare_docker() creates necessary files deploy basic vetiver model via Docker (#165). Fixed bug handling -NA columns predicting vetiver_endpoint() (#169).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-018","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.8","title":"vetiver 0.1.8","text":"CRAN release: 2022-09-29 Trailing slashes now removed vetiver_endpoint() (#134). Added support GAMs mgcv (#135) stacks (#138). Added augment method vetiver endpoint (#141). Added apt-get clean Dockerfile reduce container size (#142, thanks @csgillespie). Fixed bug system requirements added Dockerfile (#142, thanks @csgillespie). Added bundle support relevant models (#145). Fixed bug generating Dockerfiles explicitly requiring stats package (#147).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-017","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.7","title":"vetiver 0.1.7","text":"CRAN release: 2022-08-11 Now pass dots writing pin vetiver allowing, example, vetiver_pin_write(b, v, access_type = \"\") RStudio Connect (#121, #122). vetiver_pin_metrics() now finds type existing pin updates type (#122).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-016","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.6","title":"vetiver 0.1.6","text":"CRAN release: 2022-07-06 lockfile created vetiver_write_docker() can now named via argument lockfile, default vetiver_renv.lock (#100). Switched default overwrite vetiver_pin_metrics() TRUE FALSE. Using FALSE better choice interactive use TRUE probably right choice reports dashboards executed schedule (#104). Added optional EXPOSE PORT line generated Dockerfile, help Docker Desktop users (#105). Added model monitoring dashboard template (#98). knit example vetiver monitoring dashboard, execute vetiver::pin_example_kc_housing_model() set demo model metrics pins. OpenAPI spec generated vetiver model now includes model version applicable. Added option write Plumber file without packages listed RStudio Connect purposes (#112). Added new function vetiver_create_rsconnect_bundle() alternative deployment strategy (#113).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-015","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.5","title":"vetiver 0.1.5","text":"CRAN release: 2022-05-25 Add functions model monitoring (#92). Update URLs package new documentation sites.","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-014","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.4","title":"vetiver 0.1.4","text":"CRAN release: 2022-04-28 Improve Dockerfiles generated.","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-013","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.3","title":"vetiver 0.1.3","text":"CRAN release: 2022-03-09 Update tests use redaction snapshots. Use ranger conditionally examples/tests.","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-012","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.2","title":"vetiver 0.1.2","text":"CRAN release: 2022-02-16 Generate Dockerfiles deploy model (#71). Added support glm (#75) ranger (#76). Deprecated vetiver_pr_predict() favor using vetiver_api() (#77).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-011","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.1","title":"vetiver 0.1.1","text":"CRAN release: 2022-01-07 Added support tidymodels (#51), caret (#52), mlr3 (#56). Added vignette. Escalated parsing/conversion warnings errors vetiver_type_convert() (#60). Added predict method vetiver_model() (addition vetiver_endpoint()) (#61). New function vetiver_deploy_rsconnect() deploy RStudio Connect. Added R Markdown template Model Card responsible, transparent model reporting (#62, #63). Modularized vetiver_pr_predict() support advanced use cases (#67).","code":""},{"path":"https://rstudio.github.io/vetiver-r/news/index.html","id":"vetiver-010","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.0","title":"vetiver 0.1.0","text":"CRAN release: 2021-11-02 Initial CRAN release package.","code":""}]
