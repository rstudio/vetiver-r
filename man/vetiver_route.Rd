% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api2.R
\name{vetiver_route}
\alias{vetiver_route}
\title{Create a route for serving a vetiver model}
\usage{
vetiver_route(model, path = "/predict", ..., check_prototype = TRUE)
}
\arguments{
\item{model}{A vetiver model object}

\item{path}{The path to serve predictions from. Defaults to \verb{/predict}}

\item{...}{Additional arguments to pass into \code{predict()}}

\item{check_prototype}{Should the input data prototype stored in
\code{vetiver_model} be used to check new data at prediction time? Defaults to
\code{TRUE}.}
}
\value{
A \code{routr::Route} object that can be used with compatible webserver
frameworks
}
\description{
This function creates a routr route with the necessary infrastructure to
serve a vetiver model. The route can then be used in any routr based web
server such as plumber2 and fiery. For plumber2 specifically there is also
\code{\link[=api_vetiver]{api_vetiver()}} which both creates and attaches the route as well as
generates OpenAPI documentation for it.
}
\details{
You can first store and version your \code{\link[=vetiver_model]{vetiver_model()}} with
\code{\link[=vetiver_pin_write]{vetiver_pin_write()}}, and then create a route with \code{vetiver_route()}.

Several GET endpoints will also be added to the route, depending on the
characteristics of the model object:
\itemize{
\item a \verb{<root>/pin-url} endpoint to return the URL of the pinned model
\item a \verb{<root>/metadata} endpoint to return any metadata stored with the model
\item a \verb{<root>/ping} endpoint for the API health
\item a \verb{<root>/prototype} endpoint for the model's input data prototype (use
\code{\link[cereal:cereal_to_json]{cereal::cereal_from_json()}}) to convert this back to a
\href{https://vctrs.r-lib.org/articles/type-size.html}{vctrs ptype}
}

where \verb{<root>} is everything leading up to the final element of \code{path} (e.g.
if \code{path = "/model/predict"} then \verb{<root>} would be \verb{/model})
}
\examples{
\dontshow{if (rlang::is_installed("routr")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

cars_lm <- lm(mpg ~ ., data = mtcars)
v <- vetiver_model(cars_lm, "cars_linear")
model_route <- vetiver_route(v, "/cars_linear/predict")

# `model_route` can now be attached to a fiery app as a plugin
\dontshow{\}) # examplesIf}
}
