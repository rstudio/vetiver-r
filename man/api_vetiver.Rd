% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api2.R
\name{api_vetiver}
\alias{api_vetiver}
\title{Serve a vetiver model with plumber2}
\usage{
api_vetiver(api, vetiver_model, path = "/predict", ..., check_prototype = TRUE)
}
\arguments{
\item{path}{The path to serve predictions from. Defaults to \verb{/predict}}

\item{...}{Additional arguments to pass into \code{predict()}}

\item{check_prototype}{Should the input data prototype stored in
\code{vetiver_model} be used to check new data at prediction time? Defaults to
\code{TRUE}.}
}
\value{
\code{api} with the relevant endpoints added
}
\description{
This function creates a \code{\link[=vetiver_route]{vetiver_route()}} and attaches it to a plumber2 api.
In addition it will also take care of constructing the relevant OpneAPI spec
so that the model is well described.
}
\details{
You can first store and version your \code{\link[=vetiver_model]{vetiver_model()}} with
\code{\link[=vetiver_pin_write]{vetiver_pin_write()}}, and then add it to a plumber2 api with
\code{api_vetiver()}.

Several GET endpoints in addition to the main POST endpoint will also be
added, depending on the characteristics of the model object:
\itemize{
\item a \verb{<root>/pin-url} endpoint to return the URL of the pinned model
\item a \verb{<root>/metadata} endpoint to return any metadata stored with the model
\item a \verb{<root>/ping} endpoint for the API health
\item a \verb{<root>/prototype} endpoint for the model's input data prototype (use
\code{\link[cereal:cereal_to_json]{cereal::cereal_from_json()}}) to convert this back to a
\href{https://vctrs.r-lib.org/articles/type-size.html}{vctrs ptype}
}

where \verb{<root>} is everything leading up to the final element of \code{path} (e.g.
if \code{path = "/model/predict"} then \verb{<root>} would be \verb{/model})
}
\section{Using annotation}{
vetiver models can also be added to a plumber2 api using the annotation
syntax. Currently it is not possible to pass in additional arguments to
\code{predict()}

\if{html}{\out{<div class="sourceCode">}}\preformatted{#* @vetiver /model/predict
vetiver_model(lm(mpg ~ ., data = mtcars), "cars_linear")
}\if{html}{\out{</div>}}
}

\examples{
\dontshow{if (rlang::is_installed("plumber2")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

cars_lm <- lm(mpg ~ ., data = mtcars)
v <- vetiver_model(cars_lm, "cars_linear")

pa <- plumber2::api() |>
  api_vetiver(v, "/cars_linear/predict")
\dontshow{\}) # examplesIf}
}
